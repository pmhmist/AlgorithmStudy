import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    public static class Pair implements Comparable<Pair>{
        int y;
        long cost;

        Pair(int y, long cost){
            this.y = y;
            this.cost = cost;
        }

        @Override
        public int compareTo(Pair p){
            if(this.cost-p.cost > 0) return 1;
            else if(this.cost == p.cost) return 0;
            else return -1;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        StringBuilder sb = new StringBuilder();

        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        ArrayList<Pair>[] base = new ArrayList[n];
        for(int i = 0; i < n; i++) {
            base[i] = new ArrayList<>();
        }

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; j++) {
                long cost = Long.parseLong(st.nextToken());
                base[i].add(new Pair(j,cost));
            }
        }

        long[][] sv = new long[n][n];
        boolean [] searched = new boolean[n];


        for (int turn = 0; turn < m; turn++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            x -= 1;
            y -= 1;
            long c = Long.parseLong(st.nextToken());

            if(!searched[x]) {
                PriorityQueue<Pair> pq = new PriorityQueue<>();
                long[] dist = new long[n];
                Arrays.fill(dist,Long.MAX_VALUE);
                pq.offer(new Pair(x,0));
                dist[x] = 0;

                while(!pq.isEmpty()) {
                    int cur = pq.peek().y;
                    long cost = pq.peek().cost;
                    pq.poll();

                    for(Pair nxt : base[cur]) {
                        int ncur = nxt.y;
                        long ncost = nxt.cost;
                        if(cost + ncost < dist[ncur]) {
                            dist[ncur] = cost + ncost;
                            pq.offer(new Pair(ncur,cost+ncost));
                        }
                    }

                }

                for(int i = 0; i < n; i++){
                    sv[x][i] = dist[i];
                }

                searched[x] = true;
            }

            if(c >= sv[x][y]) sb.append("Enjoy other party").append('\n');
            else sb.append("Stay here").append('\n');

        }


        System.out.println(sb);
    }
}
