import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int[] parent;

    public static boolean union(int a, int b) {
        a = find(a);
        b = find(b);

        if(a == b) return false;
        else{
            parent[b] = a;
            return true;
        }
    }

    public static int find(int x) {
        if(parent[x] == x) return x;
        else return parent[x] = find(parent[x]);
    }

    public static class Node implements Comparable<Node> {
        int x;
        int y;
        int z;

        Node(int x, int y, int z){
            this.x = x;
            this.y = y;
            this.z = z;
        }

        @Override
        public int compareTo(Node n) {
            return this.z - n.z;
        }
    }

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int ans = 0;

        int n = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        int m = Integer.parseInt(st.nextToken());
        parent = new int[n+1];
        ArrayList<Node> base = new ArrayList<>();
        for(int i = 1; i <= n; i++) parent[i] = i;

        for(int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());
            base.add(new Node(a,b,c));
        }

        Collections.sort(base);

        for(Node cur : base) {
            int x = cur.x;
            int y = cur.y;
            if(union(x,y)) {
                ans += cur.z;
            }
        }

        System.out.println(ans);
    }
}
