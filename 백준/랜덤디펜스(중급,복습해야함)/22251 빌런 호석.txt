import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main
{
    static int n,k,p;
    static boolean[][] nums;
    static int sv[][];
    static StringBuilder base;
    static int ans;

    public static void turnOnNumber(){
        nums[0][0] = true; nums[0][1] = true; nums[0][2] = true; nums[0][4] = true; nums[0][5] = true;
        nums[0][6] = true;

        nums[1][2] = true; nums[1][5] = true;

        nums[2][0] = true; nums[2][2] = true; nums[2][3] = true; nums[2][4] = true; nums[2][6] = true;

        nums[3][0] = true; nums[3][2] = true; nums[3][3] = true; nums[3][5] = true; nums[3][6] = true;

        nums[4][1] = true; nums[4][2] = true; nums[4][3] = true; nums[4][5] = true;

        nums[5][0] = true; nums[5][1] = true; nums[5][3] = true; nums[5][5] = true; nums[5][6] = true;

        nums[6][0] = true; nums[6][1] = true; nums[6][3] = true; nums[6][4] = true; nums[6][5] = true;
        nums[6][6] = true;

        nums[7][0] = true; nums[7][2] = true; nums[7][5] = true;

        nums[8][0] = true; nums[8][1] = true; nums[8][2] = true; nums[8][3] = true; nums[8][4] = true;
        nums[8][5] = true; nums[8][6] = true;

        nums[9][0] = true; nums[9][1] = true; nums[9][2] = true; nums[9][3] = true; nums[9][5] = true;
        nums[9][6] = true;
    }

    public static void solve(int idx, int cnt, String ck) {
        if(idx == k) {
            int judge = Integer.valueOf(ck);
            if(judge >= 1 && judge <= n && cnt <= p) ans++;
            return;
        }

        int cur = base.charAt(idx) - '0';
        for(int j = 0; j < 10; j++){
            StringBuilder sb = new StringBuilder(ck).append(j);
            solve(idx+1,cnt + sv[cur][j], sb.toString());
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken()); // 자릿 수
        p = Integer.parseInt(st.nextToken()); // 반전 횟수
        String x = st.nextToken(); // 시작 층

        nums = new boolean[10][7];
        sv = new int[10][10];
        
        // 숫자 켜기
        turnOnNumber();

        for(int i = 0; i < 10; i++){
            for(int j = 0; j < 10; j++){
                int tmp = 0;
                for(int k = 0; k < 7; k++){
                    if(nums[i][k] != nums[j][k]) tmp++;
                }
                sv[i][j] = tmp;
            }
        }

        base = new StringBuilder(x);
        while(true){
            if(base.length() == k) break;
            StringBuilder tmp = new StringBuilder("0").append(base);
            base = tmp;
        }

        solve(0,0, "");
        ans--;

        System.out.println(ans);

    }
}