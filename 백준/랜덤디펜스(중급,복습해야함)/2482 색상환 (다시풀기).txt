import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static long res = 1_000_000_003;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        int k = Integer.parseInt(st.nextToken());
        long ans = 0;

        long[][] dp = new long[n+1][n+1];

        for(int i = 1; i <= n; i++){
            dp[i][0] = 1;
            dp[i][1] = i;
        }

        for(int i = 3; i <= n; i++) {
            for(int j = 2; j <= (i+1)/2; j++) {
                dp[i][j] = (dp[i-2][j-1] + dp[i-1][j]) % res;
            }
        }



        ans = (dp[n-3][k-1] + dp[n-1][k])%res;

        System.out.println(ans);
    }
}

=======================================
풀이 2 (이 방법이 더 직관적임)

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static long res = 1_000_000_003;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        int k = Integer.parseInt(st.nextToken());
        long ans = 0;

        long[][] dp = new long[n+1][n+1];

        for(int i = 1; i <= n; i++){
            dp[i][0] = 1;
            dp[i][1] = i;
        }

        for(int i = 4; i <= n; i++) {
            for(int j = 1; j <= k; j++) {
                dp[i][j] = (dp[i-2][j-1] + dp[i-1][j]) % res;
            }
        }

        System.out.println(dp[n][k]);
    }
}



풀이 참조

핵심 아이디어는 첫 원소와 마지막 원소를 둘 다 고려해야할 때를 제외하면

순환적인 구조에서 벗어날 수 있다는 것 입니다. 

그렇기에 시작 원소부터 끝 원소 전까지 반복을 통해 경우를 찾을 수 있습니다.

 

i 번째 원소를 보고 j개 원소를 뽑아야한다면

i 번째 원소를 뽑을 경우 ) dp[i - 2][j - 1]  (i를 뽑았으니 자신을 빼야하고, 자신 이전의 원소는 뽑을 수 없기에 i에 2를 뺍니다)

i 번째 원소를 뽑지 않을 경우 ) dp[i - 1] [j] (i를 뽑지 않았으니 자신 이전의 원소도 뽑을 수 있습니다. i에 1을 뺍니다.)

dp[i][j] = dp[i - 2][j - 1] + dp[i - 1] [j] 이라고 나타낼 수 있습니다.

 

 

이후 첫 번째 원소와 마지막 원소(n)를 포함하는 범위의 경우

마지막 원소(n)를 보고 k개 원소를 뽑아야한다면

마지막 원소를 뽑을 경우 ) dp[n - 3][k - 1] (자신을 뽑았고 자신의 바로 이전, 바로 이후는 뽑을 수 없기에 n에 3을 뺍니다.)

마지막 원소를 뽑지 않을 경우 ) dp[n - 1] [k] (자신을 뽑지 않았기에 바로 이전의 경우를 가져오면 됩니다.)

dp[n][k] = dp[n - 3][k - 1] + dp[n - 1] [k] 이라고 나타낼 수 있습니다.
