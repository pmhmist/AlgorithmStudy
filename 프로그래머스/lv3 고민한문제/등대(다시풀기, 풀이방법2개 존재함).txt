import java.util.*;

class Solution {
    
    static ArrayList<Integer>[] graph;
    static int ans = 0;
    
    public int solve(int cur, int before){
        
        // return 1 : 불 키지 않음, return 0 : 불을 킴
        
        if(graph[cur].size() == 1){
            if(graph[cur].get(0) == before) return 1;
        }
        
        
        int ck = 0;
        
        for(int nxt : graph[cur]){
            if(nxt == before) continue;
            ck += solve(nxt,cur);
        }
        
        if(ck == 0){
            return 1;
        }
        else{
            ans++;
            return 0;
        }
    }
    
    
    public int solution(int n, int[][] lighthouse) {
        int answer = n;
        
        graph = new ArrayList[n+1];
        for(int i = 0; i <= n; i++){
            graph[i] = new ArrayList<>();
        }
        
        for(int i = 0; i < lighthouse.length; i++){
            int x = lighthouse[i][0];
            int y = lighthouse[i][1];
            
            graph[x].add(y);
            graph[y].add(x);
        }
        
        solve(1,0);
        
        answer = ans;
        
        return answer;
    }
}

==============================================================

import java.util.*;

class Solution {
    
    static ArrayList<Integer>[] graph;
    static int[][] dp;
    static boolean[] vis;
    
    public static void solve(int cur){
        vis[cur] = true;
        
        dp[cur][0] = 0;
        dp[cur][1] = 1;
        
        for(int nxt : graph[cur]){
            if(vis[nxt]) continue;
            solve(nxt);
            
            dp[cur][0] += dp[nxt][1];
            dp[cur][1] += Math.min(dp[nxt][0],dp[nxt][1]);
        }
    }
    
    public int solution(int n, int[][] lighthouse) {
        int answer = n;
        
        graph = new ArrayList[n+1];
        vis = new boolean[n+1];
        
        for(int i = 0; i <= n; i++){
            graph[i] = new ArrayList<>();
        }
        
        for(int i = 0; i < lighthouse.length; i++){
            int x = lighthouse[i][0];
            int y = lighthouse[i][1];
            
            graph[x].add(y);
            graph[y].add(x);
        }
        
        dp = new int[n+1][2];
        
        solve(1);
        
        answer = Math.min(dp[1][0],dp[1][1]);
        
        return answer;
    }
}










