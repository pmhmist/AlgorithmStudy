import java.util.*;

class Solution {
    
    public int solution(int n, int m, int[][] edge_list, int k, int[] gps_log) {
        int answer = 0;
        
        ArrayList<Integer>[] board = new ArrayList[n+1];
        for(int i = 0; i <= n; i++){
            board[i] = new ArrayList<>();
        }
        
        for(int i = 0; i < m; i++){
            int x = edge_list[i][0];
            int y = edge_list[i][1];
            
            board[x].add(y);
            board[y].add(x);
            
        }
        
        // dp 사용해야함, i 번째 시간 j번 노드까지 가기위해 수정해야 하는 횟수
        int[][] dp = new int[k][n+1];        
        for(int i = 0; i < k; i++){
            for(int j = 0; j < n+1; j++){
                dp[i][j] = 100000000;
            }
        }
        dp[0][gps_log[0]] = 0;
        
        for(int i = 1; i < k; i++){
            int go = gps_log[i];
            for(int j = 1; j <= n; j++){
                int prev = dp[i-1][j];
                for(int nxt : board[j]){
                    if(nxt == go){
                        dp[i][nxt] = Math.min(dp[i][nxt],prev);
                    }
                    else{
                        dp[i][nxt] = Math.min(dp[i][nxt],prev+1);
                    }
                }
            }
        }
        
        answer = Integer.MAX_VALUE;
        answer = Math.min(answer,dp[k-1][gps_log[k-1]]);
        
        if(answer >= 100000000) answer = -1;
        
        return answer;
    }
}