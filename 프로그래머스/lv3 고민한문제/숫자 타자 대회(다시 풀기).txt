import java.util.*;

class Solution {
    private static int dist[][];
    static int[] dx = {-1,-1,-1,0,0,1,1,1};
    static int[] dy = {-1,0,1,-1,1,-1,0,1};
    
    static int[] number;
    static int[][][] dp;
    
    
    static int mx;
    static int n;
    
    public static class Pair{
        int x;
        int y;
        
        Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    public static int solve(int idx, int left, int right){
        if(idx == n) return 0;
        
        if(dp[idx][left][right] == mx){
            int ck1 = mx;
            int ck2 = mx;
            
            if(right != number[idx]){
                ck1 = dist[left][number[idx]] + solve(idx+1,number[idx],right);
            }
            
            if(left != number[idx]){
                ck2 = dist[right][number[idx]] + solve(idx+1,left,number[idx]);
            }
            
            dp[idx][left][right] = Math.min(ck1,ck2);
        }
        
        return dp[idx][left][right];
    }
    
    public int solution(String numbers) {
        int answer = 0;
        n = numbers.length();
        mx = 10000000;
        Map<Integer,Pair> m = new HashMap<>();
        
        dist = new int[10][10];
        for(int i = 0; i < 10; i++){
            for(int j = 0; j < 10; j++){
                dist[i][j] = mx;
            }
        }
        
        // dist 구하기
        int[][] board = new int[4][3];
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 3; j++) board[i][j] = -1;
        }
        
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                board[i][j] = i*3 + j + 1;
                m.put(board[i][j],new Pair(i,j));
            } 
        }
        board[3][1] = 0;
        m.put(0,new Pair(3,1));
        
        for(int i = 0; i < 10; i++){
            Queue<Pair> q = new ArrayDeque<>();
            q.offer(m.get(i));
            dist[i][i] = 0;
            
            while(!q.isEmpty()){
                int x = q.peek().x;
                int y = q.peek().y;
                int cur = board[x][y];
                q.poll();
                
                for(int dir = 0; dir < 8; dir++){
                    int nx = x + dx[dir];
                    int ny = y + dy[dir];
                    if(nx < 0 || nx >= 4 || ny < 0 || ny >= 3) continue;
                    int nxt = board[nx][ny];
                    if(nxt == -1) continue;
                    if(dir == 0 || dir == 2 || dir == 5 || dir == 7){
                        if(dist[i][nxt] > dist[i][cur] + 3){
                            dist[i][nxt] = dist[i][cur] + 3;
                            q.offer(new Pair(nx,ny));
                        }
                    }
                    else{
                        if(dist[i][nxt] > dist[i][cur] + 2){
                            dist[i][nxt] = dist[i][cur] + 2;
                            q.offer(new Pair(nx,ny));
                        }
                    }
                }
                
            }
            
            dist[i][i] = 1;
        }
        
        
        dp = new int[n][10][10];
        number = new int[n];
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 10; j++){
                for(int k = 0; k < 10; k++){
                    dp[i][j][k] = mx;
                }
            }
        }
        
        for(int i = 0; i < numbers.length(); i++){
            number[i] = numbers.charAt(i) - '0';
        }
        
        answer = solve(0,4,6);
        
        return answer;
    }
}

=============================
잔머리 쓴 버전

import java.util.*;

class Solution {
    int dist[][] = {
        {1,7,6,7,5,4,5,3,2,3}, 
        {7,1,2,4,2,3,5,4,5,6}, 
        {6,2,1,2,3,2,3,5,4,5}, 
        {7,4,2,1,5,3,2,6,5,4}, 
        {5,2,3,5,1,2,4,2,3,5}, 
        {4,3,2,3,2,1,2,3,2,3}, 
        {5,5,3,2,4,2,1,5,3,2}, 
        {3,4,5,6,2,3,5,1,2,4}, 
        {2,5,4,5,3,2,3,2,1,2}, 
        {3,6,5,4,5,3,2,4,2,1} 
    };
    
    int[] number;
    int[][][] dp;
    
    static int mx;
    static int n;
    
    public int solve(int idx, int left, int right){
        if(idx == n) return 0;
        
        if(dp[idx][left][right] == mx){
            int ck1 = mx;
            int ck2 = mx;
            
            if(right != number[idx]){
                ck1 = dist[left][number[idx]] + solve(idx+1,number[idx],right);
            }
            
            if(left != number[idx]){
                ck2 = dist[right][number[idx]] + solve(idx+1,left,number[idx]);
            }
            
            dp[idx][left][right] = Math.min(ck1,ck2);
        }
        
        return dp[idx][left][right];
    }
    
    public int solution(String numbers) {
        int answer = 0;
        n = numbers.length();
        mx = 1000000;
        
        dp = new int[n][10][10];
        number = new int[n];
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 10; j++){
                for(int k = 0; k < 10; k++){
                    dp[i][j][k] = mx;
                }
            }
        }
        
        for(int i = 0; i < numbers.length(); i++){
            number[i] = numbers.charAt(i) - '0';
        }
        
        answer = solve(0,4,6);
        
        return answer;
    }
}