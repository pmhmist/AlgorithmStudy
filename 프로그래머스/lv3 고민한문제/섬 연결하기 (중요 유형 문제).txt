import java.util.*;
class Solution {
    static int[] parent;
    static int[] rank;
    
    public static int find(int x){
        if(parent[x] == x) return x;
        return parent[x] = find(parent[x]);
    }
    
    public static void union(int x, int y){
        x = find(x);
        y = find(y);
        
        if(x == y) return;
        if(rank[x] < rank[y]) parent[x] = y;
        else if(rank[x] > rank[y]) parent[y] = x;
        else if(rank[x] == rank[y]){
            parent[x] = y;
            rank[x]++;
        }
    }
    
    public static class Node implements Comparable <Node>{
        int x;
        int y;
        int cost;
        
        Node(int x, int y, int cost){
            this.x = x;
            this.y = y;
            this.cost = cost;
        }
        
        @Override
        public int compareTo(Node n){
            return this.cost -n.cost;
        }
    }
    
    public int solution(int n, int[][] costs) {
        int answer = 0;
        parent = new int[n];
        rank = new int[n];
        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
        
        PriorityQueue<Node> pq = new PriorityQueue<>();
        for(int i = 0; i < costs.length;i++){
            pq.offer(new Node(costs[i][0],costs[i][1],costs[i][2]));
        }
        
        while(!pq.isEmpty()){
            int x = pq.peek().x;
            int y = pq.peek().y;
            int cost = pq.peek().cost;
            pq.poll();
            
            if(find(x) != find(y)){
                answer += cost;
                union(x,y);
            }
            
        }
        
        return answer;
    }
}