import java.util.*;

class Solution {
    
    public long solution(int[] weights) {
        long answer = 0;
        Arrays.sort(weights);
        Map<Integer,Integer> map = new HashMap<>();
        Set<Integer> set = new HashSet<>();
        for(int i = 0; i < weights.length; i++){
            if(map.containsKey(weights[i])){
                map.put(weights[i],map.get(weights[i])+1);
            }
            else{
                map.put(weights[i],1);
            }
        }
        
        for(int turn = 0; turn < weights.length; turn++){
            int val = weights[turn];
            
            for(int i = 2; i <= 4; i++){
                for(int j = 2; j <= 4; j++){
                    int base = val*i;
                    if(base%j != 0) continue;
                    int target = base/j;
                    if(target < val) continue;
                    
                    if(target == val){
                        if(!set.contains(target)){
                            set.add(target);
                            long ck = (long)map.get(target);
                            answer += ck*(ck-1)/2;
                        }
                    }
                    else if(target > val){
                        if(map.containsKey(target)){
                            answer += map.get(target);
                        }
                    }
                    
                }
            }
            
        }
        
 
        
        return answer;
    }
}