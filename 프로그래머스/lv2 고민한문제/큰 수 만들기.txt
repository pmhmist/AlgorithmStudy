import java.util.*;

class Solution {
    
    public static class Pair implements Comparable<Pair>{
        
        int x;
        int y;
        
        Pair(int x ,int y){
            this.x = x;
            this.y = y;
        }
        
        @Override
        public int compareTo(Pair p){
            return this.x - p.x;
        }
    }
    
    public String solution(String number, int k) {
        String answer = "";
        boolean[] vis = new boolean[number.length()];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        int len = number.length();
        boolean judge = true;
        int cnt = 0;
        
        for(int i = 0; i < len-1; i++){
            int cur = number.charAt(i) - '0';
            int nxt = number.charAt(i+1) - '0';
            
            if(cur >= nxt){
                pq.offer(new Pair(cur,i));
            }
            else{
                vis[i] = true;
                cnt++;
                if(cnt == k) break;
                
                while(!pq.isEmpty()){
                    int ck = pq.peek().x;
                    int idx = pq.peek().y;
                    if(ck < nxt){
                        vis[idx] = true;
                        pq.poll();
                        cnt++;
                    }
                    else{
                        break;
                    }
                    if(cnt == k) break;
                }
                if(cnt == k) break;
            }
        }
        
        
        int idx = 0;
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < len; i++){
            if(vis[i]) continue;
            sb.append(number.charAt(i));
            idx++;
            if(idx == number.length()-k) break;
        }
        answer = sb.toString();
        return answer;
    }
}