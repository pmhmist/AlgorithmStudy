import java.util.*;

class Solution {
    
    static int[] dx = {-1,0,1,0};
    static int[] dy = {0,1,0,-1};
    static boolean[][][] route;
    
    public int[] solution(String[] grid) {
        ArrayList<Integer> ans = new ArrayList<>();
        int cnt = 0;
        int n = grid.length;
        int m = grid[0].length();
        
        char[][] board = new char[n][m];
        for(int i = 0; i < n; i++){
            String sam = grid[i];
            for(int j = 0; j < m; j++){
                board[i][j] = sam.charAt(j);
            }
        }
        
        route = new boolean[n][m][4];
        for(int i1 = 0; i1 < n; i1++){
            for(int j1 = 0; j1 < m; j1++){
                for(int k1 = 0; k1 < 4; k1++){   
                    if(!route[i1][j1][k1]){
                        int len = 0;
                        cnt++;
                        int x = i1;
                        int y = j1;
                        int dir = k1;
                        int bx = x;
                        int by = y;
                        int bdir = dir;
                        while(true){
                            route[x][y][dir] = true;
                            int nx = x + dx[dir];
                            int ny = y + dy[dir];
                            
                            if(nx == n) nx = 0;
                            else if(nx == -1) nx = n-1;
                            if(ny == m) ny = 0;
                            else if(ny == -1) ny = m-1;
                            
                            if(board[nx][ny] == 'L'){
                                if(dir == 0){
                                    dir = 3;
                                }
                                else if(dir == 1){
                                    dir = 0;
                                }
                                else if(dir == 2){
                                    dir = 1;
                                }
                                else{
                                    dir = 2;
                                }
                            }
                            else if(board[nx][ny] == 'R'){
                                if(dir == 0){
                                    dir = 1;
                                }
                                else if(dir == 1){
                                    dir = 2;
                                }
                                else if(dir == 2){
                                    dir = 3;
                                }
                                else{
                                    dir = 0;
                                }
                            }
                            len++;
                            if(nx == bx && ny == by && dir == bdir) break;
                            x = nx;
                            y = ny;
                        }
                        ans.add(len);
                    }
                }
            }
        }
        
        int[] answer = new int[cnt];
        for(int i = 0; i < cnt; i++){
            answer[i] = ans.get(i);
        }
        Arrays.sort(answer);
        return answer;
    }
}