import java.util.*;

class Solution {
    
    public static class Pair implements Comparable<Pair>{
        int x;
        int y;
        
        Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
        
        @Override
        public int compareTo(Pair p){
            if(this.x == p.x){
                return p.y - this.y;
            }
            return this.x - p.x;
        }
    }
    
    public String solution(int n, int t, int m, String[] timetable) {
        //9시부터 n회 t분 간격, 탈수있는 최대 크루수 m개
        String answer = "";
        int len = timetable.length;
        int[] arr = new int[len];
        
        int start = 540;
        int[] bus = new int[n];
        for(int i = 0; i < n; i++){
            bus[i] = start + t*i;
        }
        
        for(int i = 0; i < len; i++){
            String[] tmp = timetable[i].split(":");
            int hour = Integer.valueOf(tmp[0]);
            int min = Integer.valueOf(tmp[1]);
            int cur = hour*60 + min;
            arr[i] = cur;
        }
        
        Arrays.sort(arr);
        int ans = 0;
        for(int cur = 0; cur < 1440; cur++){
            PriorityQueue<Pair> pq = new PriorityQueue<>();
            
            for(int i = 0; i < len; i++){
                pq.offer(new Pair(arr[i],i));
            }
            pq.offer(new Pair(cur,-1));
            
            boolean judge = false;
            
            for(int i = 0; i < n; i++){
                int bustime = bus[i];
                int tmp = m;
                while(true){
                    Pair ck = pq.peek();
                    if(ck.x <= bustime){
                        tmp--;
                        if(ck.y == -1){
                            judge = true;
                            break;
                        }
                        pq.poll();
                        if(tmp == 0) break;
                    }
                    else{
                        break;
                    }
                }
                
                if(judge) break;
            }
            
            if(judge) ans = cur;
            
        }
        
        answer = change(ans);
        
        return answer;
    }
    
    public static String change(int x){
        int a = x/60;
        int b = x%60;
        
        StringBuilder ta = new StringBuilder(Integer.toString(a));
        StringBuilder tb = new StringBuilder(Integer.toString(b));
        if(a < 10) ta.insert(0,'0');
        if(b < 10) tb.insert(0,'0');
        ta.append(":");
        ta.append(tb);
        
        return ta.toString();
    }
}

====================
최적화된 풀이
import java.util.*;
 
class Solution {
    public String solution(int n, int t, int m, String[] timetable) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(String table : timetable) {
            int time = Integer.parseInt(table.substring(0, 2)) * 60 + Integer.parseInt(table.substring(3));
            pq.add(time);
        }
     
        int start_time = 9 * 60;
        int last_time = 0;
        int total = 0;
        for(int i = 0; i < n; i++) {
            total = 0;    
            while(!pq.isEmpty()) {
                int current_time = pq.peek();
                if(current_time <= start_time && total < m) {
                    pq.poll();
                    total++;
                } else break;
                last_time = current_time - 1;
            }
            start_time += t;
        }
        if(total < m) last_time = start_time - t;
        
        String hour = String.format("%02d", last_time / 60);
        String minute = String.format("%02d", last_time % 60);
        return hour + ":" + minute;
    }
}



