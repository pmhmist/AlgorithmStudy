import java.util.*;

class Solution {
    public boolean solution(int[][] key, int[][] lock) {
        boolean answer = false;
        int m = key.length;
        int n = lock.length;
        int tot = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(lock[i][j] == 0) tot++;
            }
        }
        
        for(int rot = 0; rot < 4; rot ++){
            
            for(int x2 = 0; x2 < n+m; x2++){
                for(int y2 = 0; y2 < n+m; y2++){
                    int x1 = x2 - m + 1;
                    int y1 = y2 - m + 1;
                    int cnt = 0;
                    boolean fail = false;
                    
                    for(int i = 0; i < m; i++){
                        for(int j = 0; j < m; j++){
                            int tx = x1 + i;
                            int ty = y1 + j;
                            if(tx < 0 || tx >= n || ty < 0 || ty >= n) continue;
                            
                            if(key[i][j] == 1){
                                if(lock[tx][ty] == 0) cnt++;
                                else if(lock[tx][ty] == 1) fail = true;
                            }
                        }
                    }
                    
                    if(cnt == tot && !fail){
                        answer = true;
                    }
                }
            }
            
            if(answer) break;
            
            
            int[][] tmp = new int[m][m];
            for(int i = 0; i < m; i++){
                for(int j = 0; j < m; j++){
                    tmp[i][j] = key[m-1-j][i];
                }
            }
            
            for(int i = 0; i < m; i++){
                for(int j = 0; j < m; j++){
                    key[i][j] = tmp[i][j];
                }
            }
        }
        
        return answer;
    }
}