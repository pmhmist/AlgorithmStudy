import java.util.*;

class Solution {
    
    public static int[][] base;
    public static int[] ans;
    public static ArrayList<String> history;
    static int[] sv;
    static int[] sv2;
    static int[] sv3;
    static int n;
    static int win;
    
    static int[] cmp1;
    static int[] cmp2;
    public static void rotate(int cur, int depth){
        if(depth == n/2){
            
            int idx = 0;
            int tmpwin = 0;
            int score1 = 0;
            int score2 = 0;
            
            for(int i = 0; i < n; i++){
                boolean ck = false;
                for(int j = 0; j < n/2; j++){
                    if(i == sv[j]) ck = true;
                }
                if(!ck){
                    sv2[idx++] = i;
                }
            }
            
            for(int i = 0; i < history.size(); i++){
                String tmp = history.get(i);
                for(int k = 0; k < tmp.length(); k++){
                    score1 += base[sv[k]][tmp.charAt(k) - '0']; 
                    score2 += base[sv2[k]][tmp.charAt(k) - '0'];
                }
                cmp1[i] = score1;
                cmp2[i] = score2;
                score1 = 0;
                score2 = 0;
            }
            
            Arrays.sort(cmp1);
            Arrays.sort(cmp2);
            int point = 0;
            for(int i = 0; i < history.size(); i++){
                while(true){
                    if(point == history.size()) break;
                    if(cmp2[point] < cmp1[i]){
                        point++;
                    }
                    else{
                        break;
                    }
                }
                tmpwin += point;
            }
            
            if(tmpwin > win){
                win = tmpwin;
                for(int i = 0; i < n/2; i++){
                    ans[i] = sv[i];
                }
            }
            
            return;
        }
        
        for(int i = cur; i < n; i++){
            sv[depth] = i;
            rotate(i+1,depth+1);
        }
        
    }
    
    public static void roll(int depth){
        if(depth == n/2){
            StringBuilder sb = new StringBuilder();
            for(int i = 0; i < n/2; i++){
                sb.append(sv3[i]);
            }
            history.add(sb.toString());
            return;
        }
        
        for(int i = 0; i < 6; i++){
            sv3[depth] = i;
            roll(depth+1);
        }
    }
    public int[] solution(int[][] dice) {
        n = dice.length;
        ans = new int[n/2];
        history = new ArrayList<>();
        sv = new int[n/2];
        sv2 = new int[n/2];
        sv3 = new int[n/2];
        base = dice;
        win = -1;
        
        int sz = 6;
        for(int i = 1; i < n/2; i++){
            sz *= 6;
        }
        
        int mx = sz;
        
        cmp1 = new int[mx];
        cmp2 = new int[mx];
        
        roll(0);
        rotate(0,0);
        
        int[] answer = new int[n/2];
        for(int i = 0; i < n/2; i++){
            answer[i] = ans[i] + 1;
        }
        return answer;
    }
}