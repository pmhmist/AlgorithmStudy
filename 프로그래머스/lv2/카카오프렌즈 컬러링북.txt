import java.util.*;
class Solution {
    
    static int[] dx = {-1,0,1,0};
    static int[] dy = {0,1,0,-1};
    
    public static class Pair{
        int x;
        int y;
        Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    public int[] solution(int m, int n, int[][] picture) {
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;
        boolean[][] vis = new boolean[m][n];
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(picture[i][j] == 0) continue;
                if(vis[i][j]) continue;
                Queue<Pair> q = new ArrayDeque<>();
                q.offer(new Pair(i,j));
                vis[i][j] = true;
                numberOfArea += 1;
                int cnt = 0;
                int base = picture[i][j];
                while(!q.isEmpty()){
                    int x = q.peek().x;
                    int y = q.peek().y;
                    q.poll();
                    cnt += 1;
                    for(int dir = 0; dir < 4; dir++){
                        int nx = x + dx[dir];
                        int ny = y + dy[dir];
                        if(nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                        if(vis[nx][ny]) continue;
                        if(picture[nx][ny] != base) continue;
                        q.offer(new Pair(nx,ny));
                        vis[nx][ny] = true;
                    }
                }
                
                if(maxSizeOfOneArea < cnt){
                    maxSizeOfOneArea = cnt;
                }  
            }
        }
        

        int[] answer = new int[2];
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }
}