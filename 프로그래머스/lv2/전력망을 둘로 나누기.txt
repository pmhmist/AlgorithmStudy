import java.util.*;
class Solution {
    public static class Pair{
        int x;
        int y;
        
        Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    public int solution(int n, int[][] wires) {
        int answer = -1;
        
        ArrayList<Integer>[] board = new ArrayList[n+1];
        ArrayList<Pair> route = new ArrayList<>();
        
        for(int i = 0; i <= n; i++){
            board[i] = new ArrayList<>();
        }
        
        for(int i = 0; i < wires.length;i++){
            int x = wires[i][0];
            int y = wires[i][1];
            route.add(new Pair(x,y));
            board[x].add(y);
            board[y].add(x);
        }
        
        answer = Integer.MAX_VALUE;
        for(int turn = 0; turn < route.size(); turn++){
            int bx = route.get(turn).x;
            int by = route.get(turn).y;
            boolean[] vis = new boolean[n+1];
            int cnt1 = 0;
            int cnt2 = 0;
            boolean judge = false;
            for(int i = 1; i <= n; i++){
                if(!vis[i]){
                    vis[i] = true;
                    Queue<Integer> q = new ArrayDeque<>();
                    q.offer(i);
                    while(!q.isEmpty()){
                        if(!judge) cnt1++;
                        else cnt2++;
                        int cur = q.peek();
                        q.poll();
                        for(int nxt : board[cur]){
                            if(vis[nxt]) continue;
                            if(cur == bx && nxt == by) continue;
                            if(cur == by && nxt == bx) continue;
                            vis[nxt] = true;
                            q.offer(nxt);
                        }
                    }
                    judge = true;
                }
                
            }
            answer = Math.min(answer,Math.abs(cnt1-cnt2));
        }
        
        
        return answer;
    }
}